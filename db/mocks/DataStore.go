// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	types "gotest/types"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// CreateGrocery provides a mock function with given fields: newGrocery
func (_m *DataStore) CreateGrocery(newGrocery types.Grocery) (types.Grocery, error) {
	ret := _m.Called(newGrocery)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Grocery) (types.Grocery, error)); ok {
		return rf(newGrocery)
	}
	if rf, ok := ret.Get(0).(func(types.Grocery) types.Grocery); ok {
		r0 = rf(newGrocery)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(types.Grocery) error); ok {
		r1 = rf(newGrocery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroceryForUser provides a mock function with given fields: userId, groceryId
func (_m *DataStore) CreateGroceryForUser(userId uuid.UUID, groceryId int) error {
	ret := _m.Called(userId, groceryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int) error); ok {
		r0 = rf(userId, groceryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewuser provides a mock function with given fields: user
func (_m *DataStore) CreateNewuser(user types.User) (types.User, error) {
	ret := _m.Called(user)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(types.User) (types.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(types.User) types.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(types.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGrocery provides a mock function with given fields: groceryId
func (_m *DataStore) DeleteGrocery(groceryId int) (types.Grocery, error) {
	ret := _m.Called(groceryId)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (types.Grocery, error)); ok {
		return rf(groceryId)
	}
	if rf, ok := ret.Get(0).(func(int) types.Grocery); ok {
		r0 = rf(groceryId)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(groceryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroceryFromUser provides a mock function with given fields: userId, groceryId
func (_m *DataStore) DeleteGroceryFromUser(userId uuid.UUID, groceryId int) error {
	ret := _m.Called(userId, groceryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int) error); ok {
		r0 = rf(userId, groceryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserByName provides a mock function with given fields: username
func (_m *DataStore) DeleteUserByName(username string) (types.User, error) {
	ret := _m.Called(username)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindGroceryWithId provides a mock function with given fields: groceryId
func (_m *DataStore) FindGroceryWithId(groceryId int) (types.Grocery, error) {
	ret := _m.Called(groceryId)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (types.Grocery, error)); ok {
		return rf(groceryId)
	}
	if rf, ok := ret.Get(0).(func(int) types.Grocery); ok {
		r0 = rf(groceryId)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(groceryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByUsernameAndPassword provides a mock function with given fields: username, password
func (_m *DataStore) FindUserByUsernameAndPassword(username string, password string) (types.User, error) {
	ret := _m.Called(username, password)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (types.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) types.User); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroceries provides a mock function with given fields:
func (_m *DataStore) GetAllGroceries() ([]types.Grocery, error) {
	ret := _m.Called()

	var r0 []types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.Grocery, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.Grocery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Grocery)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroceriesFromUser provides a mock function with given fields: userId
func (_m *DataStore) GetAllGroceriesFromUser(userId string) ([]types.UserGrocery, error) {
	ret := _m.Called(userId)

	var r0 []types.UserGrocery
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.UserGrocery, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []types.UserGrocery); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.UserGrocery)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields:
func (_m *DataStore) GetAllUsers() []types.User {
	ret := _m.Called()

	var r0 []types.User
	if rf, ok := ret.Get(0).(func() []types.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.User)
		}
	}

	return r0
}

// GetGroceriesByName provides a mock function with given fields: name
func (_m *DataStore) GetGroceriesByName(name string) ([]types.Grocery, error) {
	ret := _m.Called(name)

	var r0 []types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.Grocery, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []types.Grocery); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Grocery)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleIdByName provides a mock function with given fields: username
func (_m *DataStore) GetRoleIdByName(username string) (int, error) {
	ret := _m.Called(username)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *DataStore) GetUserByUsername(username string) (types.User, error) {
	ret := _m.Called(username)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGrocery provides a mock function with given fields: grocery
func (_m *DataStore) UpdateGrocery(grocery types.Grocery) (types.Grocery, error) {
	ret := _m.Called(grocery)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Grocery) (types.Grocery, error)); ok {
		return rf(grocery)
	}
	if rf, ok := ret.Get(0).(func(types.Grocery) types.Grocery); ok {
		r0 = rf(grocery)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(types.Grocery) error); ok {
		r1 = rf(grocery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusOfGrocery provides a mock function with given fields: groceryId, status
func (_m *DataStore) UpdateStatusOfGrocery(groceryId int, status bool) (types.Grocery, error) {
	ret := _m.Called(groceryId, status)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(int, bool) (types.Grocery, error)); ok {
		return rf(groceryId, status)
	}
	if rf, ok := ret.Get(0).(func(int, bool) types.Grocery); ok {
		r0 = rf(groceryId, status)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(groceryId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: updatedUser
func (_m *DataStore) UpdateUser(updatedUser types.User) (types.User, error) {
	ret := _m.Called(updatedUser)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(types.User) (types.User, error)); ok {
		return rf(updatedUser)
	}
	if rf, ok := ret.Get(0).(func(types.User) types.User); ok {
		r0 = rf(updatedUser)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(types.User) error); ok {
		r1 = rf(updatedUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataStore creates a new instance of DataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataStore {
	mock := &DataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
