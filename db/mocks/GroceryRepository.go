// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	types "gotest/types"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// GroceryRepository is an autogenerated mock type for the GroceryRepository type
type GroceryRepository struct {
	mock.Mock
}

// CreateGrocery provides a mock function with given fields: newGrocery
func (_m *GroceryRepository) CreateGrocery(newGrocery types.Grocery) (types.Grocery, error) {
	ret := _m.Called(newGrocery)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Grocery) (types.Grocery, error)); ok {
		return rf(newGrocery)
	}
	if rf, ok := ret.Get(0).(func(types.Grocery) types.Grocery); ok {
		r0 = rf(newGrocery)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(types.Grocery) error); ok {
		r1 = rf(newGrocery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroceryForUser provides a mock function with given fields: userId, groceryId
func (_m *GroceryRepository) CreateGroceryForUser(userId uuid.UUID, groceryId int) error {
	ret := _m.Called(userId, groceryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int) error); ok {
		r0 = rf(userId, groceryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGrocery provides a mock function with given fields: groceryId
func (_m *GroceryRepository) DeleteGrocery(groceryId int) (types.Grocery, error) {
	ret := _m.Called(groceryId)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (types.Grocery, error)); ok {
		return rf(groceryId)
	}
	if rf, ok := ret.Get(0).(func(int) types.Grocery); ok {
		r0 = rf(groceryId)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(groceryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroceryFromUser provides a mock function with given fields: userId, groceryId
func (_m *GroceryRepository) DeleteGroceryFromUser(userId uuid.UUID, groceryId int) error {
	ret := _m.Called(userId, groceryId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int) error); ok {
		r0 = rf(userId, groceryId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindGroceryWithId provides a mock function with given fields: groceryId
func (_m *GroceryRepository) FindGroceryWithId(groceryId int) (types.Grocery, error) {
	ret := _m.Called(groceryId)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (types.Grocery, error)); ok {
		return rf(groceryId)
	}
	if rf, ok := ret.Get(0).(func(int) types.Grocery); ok {
		r0 = rf(groceryId)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(groceryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroceries provides a mock function with given fields:
func (_m *GroceryRepository) GetAllGroceries() ([]types.Grocery, error) {
	ret := _m.Called()

	var r0 []types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]types.Grocery, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []types.Grocery); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Grocery)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroceriesFromUser provides a mock function with given fields: userId
func (_m *GroceryRepository) GetAllGroceriesFromUser(userId string) ([]types.UserGrocery, error) {
	ret := _m.Called(userId)

	var r0 []types.UserGrocery
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.UserGrocery, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []types.UserGrocery); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.UserGrocery)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroceriesByName provides a mock function with given fields: name
func (_m *GroceryRepository) GetGroceriesByName(name string) ([]types.Grocery, error) {
	ret := _m.Called(name)

	var r0 []types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.Grocery, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []types.Grocery); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Grocery)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGrocery provides a mock function with given fields: grocery
func (_m *GroceryRepository) UpdateGrocery(grocery types.Grocery) (types.Grocery, error) {
	ret := _m.Called(grocery)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Grocery) (types.Grocery, error)); ok {
		return rf(grocery)
	}
	if rf, ok := ret.Get(0).(func(types.Grocery) types.Grocery); ok {
		r0 = rf(grocery)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(types.Grocery) error); ok {
		r1 = rf(grocery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusOfGrocery provides a mock function with given fields: groceryId, status
func (_m *GroceryRepository) UpdateStatusOfGrocery(groceryId int, status bool) (types.Grocery, error) {
	ret := _m.Called(groceryId, status)

	var r0 types.Grocery
	var r1 error
	if rf, ok := ret.Get(0).(func(int, bool) (types.Grocery, error)); ok {
		return rf(groceryId, status)
	}
	if rf, ok := ret.Get(0).(func(int, bool) types.Grocery); ok {
		r0 = rf(groceryId, status)
	} else {
		r0 = ret.Get(0).(types.Grocery)
	}

	if rf, ok := ret.Get(1).(func(int, bool) error); ok {
		r1 = rf(groceryId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGroceryRepository creates a new instance of GroceryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroceryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroceryRepository {
	mock := &GroceryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
