// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "gotest/types"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// CreateNewUser provides a mock function with given fields: user
func (_m *UserServiceInterface) CreateNewUser(user types.User) types.User {
	ret := _m.Called(user)

	var r0 types.User
	if rf, ok := ret.Get(0).(func(types.User) types.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	return r0
}

// DeleteUserByName provides a mock function with given fields: username
func (_m *UserServiceInterface) DeleteUserByName(username string) (types.User, error) {
	ret := _m.Called(username)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByUsernameAndPassword provides a mock function with given fields: username, password
func (_m *UserServiceInterface) FindUserByUsernameAndPassword(username string, password string) (types.User, error) {
	ret := _m.Called(username, password)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (types.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) types.User); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserServiceInterface) GetAllUsers() []types.User {
	ret := _m.Called()

	var r0 []types.User
	if rf, ok := ret.Get(0).(func() []types.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.User)
		}
	}

	return r0
}

// GetUserByName provides a mock function with given fields: name
func (_m *UserServiceInterface) GetUserByName(name string) (types.User, error) {
	ret := _m.Called(name)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.User, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) types.User); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIdByUsername provides a mock function with given fields: username
func (_m *UserServiceInterface) GetUserIdByUsername(username string) (string, error) {
	ret := _m.Called(username)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: updatedUser
func (_m *UserServiceInterface) UpdateUser(updatedUser types.User) (types.User, error) {
	ret := _m.Called(updatedUser)

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(types.User) (types.User, error)); ok {
		return rf(updatedUser)
	}
	if rf, ok := ret.Get(0).(func(types.User) types.User); ok {
		r0 = rf(updatedUser)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(types.User) error); ok {
		r1 = rf(updatedUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
